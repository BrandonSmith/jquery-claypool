h1. Welcome to Claypool 

h3. A Web 1.6180339... Javascript Application Framework

jquery-claypool is a small, concise, railable application framework for jquery that
allows you to use an mvc approach to build large, long-lived applications.
It keeps your code clean, maintainable, and flexible saving your project time and cost.

jquery-claypool is primarily a client-side application framework.  it focuses on
an application architecture that is becoming more common. specifically the 
application is delivered once as html, css, and javascript; then, the application
focuses on providing a seamless user experience by consuming services via
ajax.

jquery-claypool is also a server-side web-application and persistence framework that 
includes everything needed to create database-backed web-applications according to the
model-view-control pattern of separation. the difference with traditional web-app
approaches is that claypool server focuses on providing services, exposing the view (also
called the presentation) into xml/json/xhtml templates that are used to continually
update the application running on the client. 

h3. Getting started

remember jquery-claypool is primarily a pure client-side app framework so you can develop
apps that run entirely on static html in apache, a local html file, or using whatever 
sever-side language choose to develop with.  simply deliver the app, and provide services to
it.

h4. Claypool Web Server

jquery-claypool comes with the spectacular jetty server by default, so you don't
have to install or configure anything to play around, but you can also simply
drop a project directly into your tomcat webapps dir if you're already that advanced.

# Start the web server: <tt>ant -f scripts/build.xml run</tt>
# Go to http://localhost:8080/ and see the template project.
# Follow the guidelines to start developing your application

developing on the server with jquery-claypool, is exactly like developing on the client with 
jquery-claypool.  It runs in a simulated browser environment and loads javascript the same way,
from the html that houses your app.  like aptana's jaxer, you can choose to load specific scripts
on the server or client.

h3. Debugging Claypool

on the client, of course it's a cinch with "FireBug":http://getfirebug.com/.  But 
jquery-claypool comes with an advanced category logging framework that allows you to tune
messages to the firebug console.

On the server jquery-laypool makes use of the exact same category logging framework. When
you run the server from the console and view the application you will see the Logging
statements written to system out.  


h3. Description of contents

* app
** Holds all the code that's specific to this particular application.

* app/controllers
** Holds controllers.

* app/models
** Holds models.
  
* app/views
** Holds the views and template files for the view.

* app/services
** Holds API classes for web services.

* app/config
** Configuration files for the Claypool environment, the routing map, inversion of control, logging, and other dependencies.

* lib 
** Application specific libraries. 
    
* images
** Images
  
* css
** Stylesheets
  
* scripts
** Helper scripts for building distributables (think concat and min), running the server.

* tests
** Unit and functional tests along with fixtures.

* plugins
** External libraries that the application depends on. 
  
h2. More Documentation

Please see our continued documentation at the jQueryClaypool:http://docs.jquery.com/Plugins/Claypool/
  