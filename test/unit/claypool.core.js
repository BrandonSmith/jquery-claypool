/**
*   Claypool.TestSuite
*   
*   @author Chris Thatcher 
*   @email thatcher.christopher@gmail.com
*/
(function($){
	
ClaypoolCore$TestSuite = {
    "@namespace"    :    "Claypool",
    "@description"  :   "Claypool core contains basic interfaces, utility and simple implementations "+
                        "of commonly used functions and patterns.",
    "staticMethodTests"   :    [
        /**
        *   Claypool.$
        *   
        *   @author Chris Thatcher 
        *   @email thatcher.christopher@gmail.com
        */
        //StaticApplicationContextConvenience
        {
            "@method"       :   "Claypool.$",
            "@description"  :   "Convenient accessor for the Application Context.",
            "@summary"      :   "The functional unit test of this function is actually "+
                                "a part of Claypool.Application (getApplicationContext().get(id)).  "+
                                "What is sufficient for this test is to make sure that the same result "+
                                "is returned using the aliased method.",
            "@commonErrors" :   "It would be unusual for this test to fail if the source " +
                                "is actually included correctly.  Please use firefox+firebug "+
                                "to ensure that the source was downloaded properly.",
            "test"          :   function(){ this.expect(1); 
                var appContext = $.Application.getContext();
                appContext.put("abcdefg1234567", {fixture: "0987654zyxwvut"});
                this.assertSame(
                    $.$("abcdefg1234567"),
                    $.Application.getContext().get("abcdefg1234567"),
                    "The aliased functions must return the same result."
                );
            },
            "@author"       :   "Chris Thatcher",
            "@email"        :   "thatcher.christopher@gmail.com"
        },
        /**
        *   Claypool.createGUID
        *   
        *   @author Chris Thatcher 
        *   @email thatcher.christopher@gmail.com
        */
        //StaticRamIdGenerator
        {
            "@method"       :   "Claypool.createGUID",
            "@description"  :   "Convenient generator for a unique id in local memory space.",
            "@summary"      :   "It's not unusual for an application component to need to generate "+
                                "an id thats unique across other ids generated by the same function "+
                                "in memory.  This static method simply uses a sequence starting in the "+
                                "starting at a negative value -1000000000 and increases by one",
            "@commonErrors" :   "It would be unusual for this test to fail if the source " +
                                "is actually included correctly.  Please use firefox+firebug "+
                                "to ensure that the source was downloaded properly.",
            "test"          :   function(){
                this.expect(3);
                var guid = $.createGUID();
                this.assertNotNull(guid, "The created GUID is not null.");
                this.assertDefined(guid, "The created GUID is not undefined.");
                var anotherGuid = $.createGUID();
                this.assertNotEqual(anotherGuid, guid, "Sequentially created guids are not equal");
            },
            "@author"       :   "Chris Thatcher",
            "@email"        :   "thatcher.christopher@gmail.com"
        },
        /**
        *   Claypool.resolveName
        *   
        *   @author Chris Thatcher 
        *   @email thatcher.christopher@gmail.com
        */
        //NamespacedIntrospection
        {
            "@method"       :   "Claypool.resolveName",
            "@description"  :   "Resolves namespaced objects from a string",
            "@summary"      :   "Many parts of Claypool will specifiy a reference to an class "+
                                "method, or attribute as a fully qualified (namespaced) string. "+
                                "This simple function allows those referenced paths to be resolved" +
                                "to the script object if it actually exists.",
            "@commonErrors" :   "Providing a qualified name that doesn't exist is the most common "+
                                "error.  Make sure the all the source files for your code are included "+
                                "correctly.  Please use firefox+firebug "+
                                "to ensure that the source was downloaded properly.",
            "setup"         :   function(){
                // Put a namespaced object in global scope
                this.logger.debug("Creating fixture namespace.");
                var fixture = function(){
                    this["ClaypoolTestNS"] = {
                        InnerNS : { a: "string fixture" }
                    };
                }; fixture.call(null);
            },
            "test"          :   function(){
                this.expect(5);
                this.assertSame(
                    ClaypoolTestNS, 
                    $.resolveName("ClaypoolTestNS"), 
                    "No-Namespace name is resolved."
                );
                this.assertSame(
                    ClaypoolTestNS.InnerNS, 
                    $.resolveName("ClaypoolTestNS.InnerNS"),
                    "Nested Namespace is resolved."
                );
                this.assertSame(
                    "string fixture",
                    $.resolveName("ClaypoolTestNS.InnerNS.a"),
                    "Namespaced properties can be resolved"
                );
                this.assertUndefined(
                    $.resolveName("ClaypoolTestNS.InnerNS.h"), 
                    "Undefined properties of a namespace return undefined."
                );
                this.assertUndefined(
                    $.resolveName("ClaypoolTestNS.InnerNS.h.i"), 
                    "Undefined properties of a undefined namespace return undefined."
                );
            },
            "teardown"      :   function(){
                 // Put a namespaced object in global scope
                 this.logger.debug("Removing fixture namespace.");
                 var fixture = function(){
                     delete this["ClaypoolTestNS"];
                 };  fixture.call(null);
            },
            "@author"       :   "Chris Thatcher",
            "@email"        :   "thatcher.christopher@gmail.com"
        },
        /**
        *   Claypool.extend
        *   
        *   @author Chris Thatcher 
        *   @email thatcher.christopher@gmail.com
        */
        //
        {
            "@method"       :   "Claypool.extend",
            "@description"  :   "Via claypool.providers.js, extend is by default an alias for jQuery.extend.",
            "@summary"      :   "What is sufficient for this test is to make sure that the same result "+
                                "is returned using the aliased method.",
            "@commonErrors" :   "It would be unusual for this test to fail if the source " +
                                "is actually included correctly.  Please use firefox+firebug "+
                                "to ensure that the source was downloaded properly.",
            "test"          :   function(){ this.expect(1); 
                this.assertSame(Claypool.extend, jQuery.extend, "The default provider is jQuery.extend");
            },
            "@author"       :   "Chris Thatcher",
            "@email"        :   "thatcher.christopher@gmail.com"
        },
        /**
        *   Claypool.isFunction
        *   
        *   @author Chris Thatcher 
        *   @email thatcher.christopher@gmail.com
        */
        //
        {
            "@method"       :   "Claypool.isFunction",
            "@description"  :   "Via claypool.providers.js, extend is by default an alias for jQuery.isFunction.",
            "@summary"      :   "What is sufficient for this test is to make sure that the same result "+
                                "is returned using the aliased method.",
            "@commonErrors" :   "It would be unusual for this test to fail if the source " +
                                "is actually included correctly.  Please use firefox+firebug "+
                                "to ensure that the source was downloaded properly.",
            "test"          :   function(){ this.expect(1); 
                this.assertSame(Claypool.isFunction, jQuery.isFunction, "The default provider is jQuery.isFunction");
            },
            "@author"       :   "Chris Thatcher",
            "@email"        :   "thatcher.christopher@gmail.com"
        }
    ],
    "classTests"         :[
        /**
        *   Claypool.CachingStrategy$Interface
        *   
        *   @author Chris Thatcher 
        *   @email thatcher.christopher@gmail.com
        */
        {
            "@class"    : "Claypool.CachingStrategy$Interface",
            "methodTests"       : [
                //Interface Behavior
                {
                    "@method"       :   "Claypool.CachingStrategy$Interface.add",
                    "@description"  :   "Cannot use interface unless the implementation is provided.",
                    "@summary"      :   "Claypool exposes several interface contracts that allow "+
                                        "you to develop useful implementations.  Interfaces are "+
                                        "not checked and will result in runtime errors being thrown.",
                    "@commonErrors" :   "If you get a Claypool.MethodNotImplementedError, it's a "+
                                        "good idea to start looking for a class that has forgotton "+
                                        "to implement a interface function.",
                    "test"          :   function(){
                        this.expect(1);
                        try{
                            $.CachingStrategy$Interface.add();
                            this.fail("Expected Claypool.MethodNotImplementedError");
                        }catch(e){
                            this.assertTrue(e.name.match("Claypool.MethodNotImplementedError"), "Found expected error.");
                        }
                    },
                    "@author"       :   "Chris Thatcher",
                    "@email"        :   "thatcher.christopher@gmail.com"
                },
                //Interface Behavior
                {
                    "@method"       :   "Claypool.CachingStrategy$Interface.remove",
                    "@description"  :   "Cannot use interface unless the implementation is provided.",
                    "@summary"      :   "Claypool exposes several interface contracts that allow "+
                                        "you to develop useful implementations.  Interfaces are "+
                                        "not checked and will result in runtime errors being thrown.",
                    "@commonErrors" :   "If you get a Claypool.MethodNotImplementedError, it's a "+
                                        "good idea to start looking for a class that has forgotton "+
                                        "to implement a interface function.",
                    "test"          :   function(){
                        this.expect(1);
                        try{
                            $.CachingStrategy$Interface.remove();
                            this.fail("Expected Claypool.MethodNotImplementedError");
                        }catch(e){
                            this.assertTrue(e.name.match("Claypool.MethodNotImplementedError"), "Found expected error.");
                        }
                    },
                    "@author"       :   "Chris Thatcher",
                    "@email"        :   "thatcher.christopher@gmail.com"
                },
                //Interface Behavior
                {
                    "@method"       :   "Claypool.CachingStrategy$Interface.find",
                    "@description"  :   "Cannot use interface unless the implementation is provided.",
                    "@summary"      :   "Claypool exposes several interface contracts that allow "+
                                        "you to develop useful implementations.  Interfaces are "+
                                        "not checked and will result in runtime errors being thrown.",
                    "@commonErrors" :   "If you get a Claypool.MethodNotImplementedError, it's a "+
                                        "good idea to start looking for a class that has forgotton "+
                                        "to implement a interface function.",
                    "test"          :   function(){
                        this.expect(1);
                        try{
                            $.CachingStrategy$Interface.find();
                            this.fail("Expected Claypool.MethodNotImplementedError");
                        }catch(e){
                            this.assertTrue(e.name.match("Claypool.MethodNotImplementedError"), "Found expected error.");
                        }
                    },
                    "@author"       :   "Chris Thatcher",
                    "@email"        :   "thatcher.christopher@gmail.com"
                },
                //Interface Behavior
                {
                    "@method"       :   "Claypool.CachingStrategy$Interface.clear",
                    "@description"  :   "Cannot use interface unless the implementation is provided.",
                    "@summary"      :   "Claypool exposes several interface contracts that allow "+
                                        "you to develop useful implementations.  Interfaces are "+
                                        "not checked and will result in runtime errors being thrown.",
                    "@commonErrors" :   "If you get a Claypool.MethodNotImplementedError, it's a "+
                                        "good idea to start looking for a class that has forgotton "+
                                        "to implement a interface function.",
                    "test"          :   function(){
                        this.expect(1);
                        try{
                            $.CachingStrategy$Interface.clear();
                            this.fail("Expected Claypool.MethodNotImplementedError");
                        }catch(e){
                            this.assertTrue(e.name.match("Claypool.MethodNotImplementedError"), "Found expected error.");
                        }
                    },
                    "@author"       :   "Chris Thatcher",
                    "@email"        :   "thatcher.christopher@gmail.com"
                }
            ]
        },
        /**
        *   Claypool.SimpleCachingStrategy
        *   
        *   @author Chris Thatcher 
        *   @email thatcher.christopher@gmail.com
        */
        {
            "@class"    : "Claypool.SimpleCachingStrategy$Class",
            "methodTests"       : [
                //SimpleCacheCreationTest 
                {
                    "@method"           :   "Claypool.SimpleCachingStrategy$Class.constructor",
                    "@description"      :   "Creating a Cache with the SimpleCachingStrategy.",
                    "@summary"          :   "The Claypool.SimpleCachingStrategy implements the "+
                                            "Claypool.CachingStrategy.  This means that we should "+
                                            "be able to instantiate it normally and it should have "+
                                            "the same methods defined.",
                    "@commonErrors"     :   "It would be unusual for this test to fail if the source " +
                                            "is actually included correctly.  Please use firefox+firebug "+
                                            "to ensure that the source was downloaded properly.",
                    "test"              :   function(){
                        this.expect(5);
                        var simpleCache = new $.SimpleCachingStrategy();
                        this.assertTrue(simpleCache, "The SimpleCachingStrategy can be created.");
                        this.assertTrue($.isFunction(simpleCache.add),     "The cache exposes the method | add |");
                        this.assertTrue($.isFunction(simpleCache.remove),  "The cache exposes the method | remove |");
                        this.assertTrue($.isFunction(simpleCache.find),    "The cache exposes the method | find |");
                        this.assertTrue($.isFunction(simpleCache.clear),   "The cache exposes the method | clear |");
                    },
                    "@author"       :   "Chris Thatcher",
                    "@email"        :   "thatcher.christopher@gmail.com"
                }, 
                //AddingToSimpleCacheTest
                {
                    "@method"       :   "Claypool.SimpleCachingStrategy$Class.add",
                    "@description"  :   "Adding to a Simple Cache",
                    "@summary"      :   "When adding to the SimpleCachingStrategy a new item "+
                                        "creates a new slot in memory based on the id passed.",
                    "@commonErrors" :   "Add wil fail if the ID already exists.  If you experience "+
                                        "an issue where you expect 'add' to work but get unusual "+
                                        "results, please make sure the id is not already in use. "+
                                        "See Claypool.SimpleCachingStrategy$Class.remove .",
                    "test"          :   function(){
                        this.expect(5);
                        var simpleCache = new $.SimpleCachingStrategy();
                        this.assertEqual(0, simpleCache.size, "The new simple cache should be empty");
                        var successfullyAdded = simpleCache.add("simpleCacheAddTest00","string");
                        this.assertTrue(successfullyAdded, "Able to add an item to the empty cache");
                        this.assertEqual(1, simpleCache.size, "The simple cache should now have an item.");
                        var successfullyOverWrote = simpleCache.add("simpleCacheAddTest00","anotherString");
                        this.assertTrue(!successfullyOverWrote, "Not able to over write an item to the cache (requires remove)");
                        this.assertEqual(1, simpleCache.size, "The simple cache should still have one item.");
                    },
                    "@author"       :   "Chris Thatcher",
                    "@email"        :   "thatcher.christopher@gmail.com"
                },
                //RemovingFromSimpleCacheTest
                {
                    "@method"       :   "Claypool.SimpleCachingStrategy$Class.remove",
                    "@description"  :   "Please add a one sentence description.",
                    "@summary"      :   "Removing an item from the cache should return null if no id exists "+
                                        "otherwise the resulting size of the cache. This means you need to use "+
                                        "'===' to check the return value to make sure the removal was "+
                                        "successful.",
                    "@commonErrors" :   "The most common error with 'remove' comparing the return value "+
                                        "with anything less strong than '===', eg the cache is now empty "+
                                        "so remove returns 0, which is equal to null with the '==' operator.",
                    "test"          :   function(){
                        this.expect(2);
                        var simpleCache = new $.SimpleCachingStrategy();
                        simpleCache.add("simpleCacheAddTest00","string");
                        var successfullyRemoved = simpleCache.remove("simpleCacheAddTest00");
                        this.assertTrue(successfullyRemoved===0, "Removing should return the size of the cache value if successful.");
                        var successfullyRemovedTwice = simpleCache.remove("simpleCacheAddTest00");
                        this.assertTrue(successfullyRemovedTwice===null, "Removing should return a null value if it fails.");
                    },
                    "@author"       :   "Chris Thatcher",
                    "@email"        :   "thatcher.christopher@gmail.com"
                },
                //FindingInSimpleCacheTest
                {
                    "@method"       :   "Claypool.SimpleCachingStrategy$Class.find",
                    "@description"  :   "Retreiving items from the SimpleCache",
                    "@summary"      :   "The SimpleCachingStrategy accepts a key which it uses "+
                                        "to search for the value, otherwise it returns null.",
                    "@commonErrors" :   "An error can occur if you accidently search for a key that "+
                                        "doesn't exist in the cache and try to use the returned value "+
                                        "without checking to make sure it's not null first.",
                    "test"          :   function(){
                        this.expect(2);
                        var simpleCache = new $.SimpleCachingStrategy();
                        simpleCache.add("simpleCacheAddTest00","test string");
                        var valueFromCache = simpleCache.find("simpleCacheAddTest00");
                        this.assertEqual("test string", valueFromCache, "The expected object was returned from the cache.");
                        var valueNotInCache = simpleCache.find("simpleCacheAddTest01");
                        this.assertTrue(valueNotInCache===null, "The id does not exist so null was returned from the cache.");
                    },
                    "@author"       :   "Chris Thatcher",
                    "@email"        :   "thatcher.christopher@gmail.com"
                },
                //ClearingSimpleCacheTest
                {
                    "@method"       :   "Claypool.SimpleCachingStrategy$Class.clear",
                    "@description"  :   "Clearing the cache resets it.",
                    "@summary"      :   "When your done with a cache you might need to reset it.  This "+
                                        "is easy with 'clear' which internally returns the cache to the "+
                                        "state of an empty object.",
                    "@commonErrors" :   "It would be usual to experience an error here as the code is very"+
                                        "straight forward.",
                    "test"          :   function(){
                        this.expect(1);
                        var simpleCache = new $.SimpleCachingStrategy();
                        simpleCache.add("simpleCacheAddTest00","test string");
                        simpleCache.clear();
                        for( var item in simpleCache.cache ){
                            this.fail("Internal cache is not reset to an empty object.");
                            break;
                        }
                        this.assertTrue(simpleCache.size===0,  "Internal size variable is reset to 0.");
                    },
                    "@author"       :   "Chris Thatcher",
                    "@email"        :   "thatcher.christopher@gmail.com"
                }
            ]
        },
        /**
        *   Claypool.Router
        *   
        *   @author Chris Thatcher 
        *   @email thatcher.christopher@gmail.com
        */
        {
            "@class"    : "Claypool.Router$Class",
            "methodTests"       : [
                //RouterCreationTest
                {
                    "@method"       :   "Claypool.Router$Class.constructor",
                    "@description"  :   "A Router can be succesfully created.",
                    "@summary"      :   "A Router is an important object in Claypool as it provides "+
                                        "an interface for managing message passing between the "+
                                        "application and application framework or similarly.",
                    "@commonErrors" :   "It would be unusual for this test to fail if the source " +
                                        "is actually included correctly.  Please use firefox+firebug "+
                                        "to ensure that the source was downloaded properly.",
                    "test"          :   function(){
                        this.expect(1);
                        var router = new $.Router();
                        this.assertTrue(router, "The Router was successfully created (with no args).");
                    },
                    "@author"       :   "Chris Thatcher",
                    "@email"        :   "thatcher.christopher@gmail.com"
                },
                //RouterCompileTest
                {
                    "@method"       :   "Claypool.Router$Class.compile",
                    "@description"  :   "Compiling a router is successful.",
                    "@summary"      :   "A router is compiled by passing an array of objects and a key "+
                                        "name.  The key name may be a '|' delimited list of names to "+
                                        "use in order of precendence.  Each object in the array should have "+
                                        "a regular expression (in the form of a String) named as one of the "+
                                        "keys.  It is compiled into a regular expression and the compiled "+
                                        "expression and original object is stored for later use.",
                    "@commonErrors" :   "Invalid regular expressions can cause the router compilation to fail.",
                    "test"          :   function(){
                        this.expect(2);
                        var fixtures = [
                            { url:"/aaa",   a:0, b:1 },
                            { url:"/aaa/b", a:2, b:3 },
                            { event:"aaab", a:4, b:5 },
                            { other:"aaac", a:6, b:7 }
                        ];
                        var router = new $.Router();
                        var result = router.compile(fixtures, "url|event");
                        this.assertTrue(result===router, "When successfully compiled the router returns itself.");
                        this.assertTrue(router.size===3, "The expected number of patterns where compiled.");
                    },
                    "@author"       :   "Chris Thatcher",
                    "@email"        :   "thatcher.christopher@gmail.com"
                },
                //RouteToFirstMatchTest
                {
                    "@method"       :   "Claypool.Router$Class.first",
                    "@description"  :   "Please add a one sentence description.",
                    "@summary"      :   "Routes are a simple yet subtely complex subject.  When the "+
                                        "'first' strategy is used the compiled patterns are tested and the "+
                                        "first match is return as an array of objects containing the 'pattern' and "+
                                        "'payload'. The payload is the original JSON-ick object compiled "+
                                        "into the router. Once you get the hang of the router you will have "+
                                        "access to a very powerful application tool.",
                    "@commonErrors" :   "The most common error is confusing the RegExp.test with RegExp.match. "+
                                        "The router uses 'test' which is much more rigorous than 'match' so simple "+
                                        "routes like 'aaa' won't match a compiled test of 'a' since RegExp will "+
                                        "treat 'aaa' as an exact match. The pattern '[a]' however would match.",
                    "test"          :   function(){
                        this.expect(2);
                        var fixtures = [
                            { url:".",   a:0, b:1 },//any url
                            { url:"[a]", a:2, b:3 },//contains 'a'
                            { event:"aaab", a:4, b:5 },
                            { other:"aaac", a:6, b:7 }
                        ];
                        var router = new $.Router();
                        router.compile(fixtures, "url|event");
                        var route = router.first("/abc.html");
                        this.assertTrue(route.length===1, "Router should return the first matching route.");
                        this.assertTrue(route[0].payload&&route[0].payload.a===0, "First matched routed has the anticipated payload.");
                    },
                    "@author"       :   "Chris Thatcher",
                    "@email"        :   "thatcher.christopher@gmail.com"
                },
                //RouteToAllMatchTest
                {
                    "@method"       :   "Claypool.Router$Class.all",
                    "@description"  :   "Please add a one sentence description.",
                    "@summary"      :   "Routes are a simple yet subtely complex subject.  When the "+
                                        "'all' strategy is used the compiled patterns are tested and  "+
                                        "every match is return as an array of objects containing the 'pattern' and "+
                                        "'payload'. The payload is the original JSON-ick object compiled "+
                                        "into the router. Once you get the hang of the router you will have "+
                                        "access to a very powerful application tool.",
                    "@commonErrors" :   "The most common error is confusing the RegExp.test with RegExp.match. "+
                                        "The router uses 'test' which is much more rigorous than 'match' so simple "+
                                        "routes like 'aaa' won't match a compiled test of 'a' since RegExp will "+
                                        "treat 'aaa' as an exact match. The pattern '[a]' however would match.",
                    "test"          :   function(){
                        this.expect(3);
                        var fixtures = [
                            { url:".",   a:0, b:1 },//any url
                            { url:"[a]", a:2, b:3 },//contains 'a'
                            { event:"aaab", a:4, b:5 },
                            { other:"aaac", a:6, b:7 }
                        ];
                        var router = new $.Router();
                        router.compile(fixtures, "url|event");
                        var route = router.all("/abc.html");
                        this.assertTrue(route.length===2, "Router should return the first matching route.");
                        this.assertTrue(route[0].payload&&route[0].payload.a===0, "First matched routed has the anticipated payload.");
                        this.assertTrue(route[1].payload&&route[1].payload.a===2, "Second matched routed has the anticipated payload.");
                    },
                    "@author"       :   "Chris Thatcher",
                    "@email"        :   "thatcher.christopher@gmail.com"
                }
            ]
        },
        /**
        *   Claypool.AbstractContext
        *   
        *   @author Chris Thatcher 
        *   @email thatcher.christopher@gmail.com
        */
        {
            "@class"    : "Claypool.Context$Abstract",
            "methodTests"       : [
                //AbstractContextCreationTest
                {
                    "@method"       :   "Claypool.Context$Abstract.constructor",
                    "@description"  :   "Please add a one sentence description.",
                    "@summary"      :   "Please add a short paragraph describing the practical " +
                                        "puposes of this test.  It should also include variations "+
                                        "of the test already included.",
                    "@commonErrors" :   "It would be unusual for this test to fail if the source " +
                                        "is actually included correctly.  Please use firefox+firebug "+
                                        "to ensure that the source was downloaded properly.",
                    "test"          :   function(){
                        this.expect(1);
                        var abstractContext = new $.Context();
                        this.assertTrue(abstractContext, "The context was successfully created (with no args).");
                    },
                    "@author"       :       "Chris Thatcher",
                    "@email"        :       "thatcher.christopher@gmail.com"
                },
                //AbstractContextPutTest
                {
                    "@method"       :   "Claypool.Context$Abstract.put",
                    "@description"  :   "Can't use interface unless the implementation is provided.",
                    "@summary"      :   "Claypool exposes several interface contracts that allow "+
                                        "you to develop useful implementations.  Interfaces are "+
                                        "not checked and will result in runtime errors being thrown.",
                    "@commonErrors" :   "If you get a Claypool.MethodNotImplementedError, it's a "+
                                        "good idea to start looking for a class that has forgotton "+
                                        "to implement a interface function.",
                    "test"          :   function(){
                        this.expect(1);
                        var abstractContext = new $.Context();
                        try{
                           abstractContext.put("Any Value");
                           this.fail("Expected Claypool.MethodNotImplementedError");
                        }catch(e){
                           this.assertTrue(e.name.match("Claypool.MethodNotImplementedError"), "Found expected error.");
                        }
                    },
                    "@author"       :   "Chris Thatcher",
                    "@email"        :   "thatcher.christopher@gmail.com"
                },
                //AbstractContextGetTest
                {
                    "@method"       :   "Claypool.Context$Abstract.get",
                    "@description"  :   "Can't use interface unless the implementation is provided.",
                    "@summary"      :   "Claypool exposes several interface contracts that allow "+
                                        "you to develop useful implementations.  Interfaces are "+
                                        "not checked and will result in runtime errors being thrown.",
                    "@commonErrors" :   "If you get a Claypool.MethodNotImplementedError, it's a "+
                                        "good idea to start looking for a class that has forgotton "+
                                        "to implement a interface function.",
                    "test"          :   function(){
                        this.expect(1);
                        var abstractContext = new $.Context();
                        try{
                           abstractContext.get("Any Value");
                           this.fail("Expected Claypool.MethodNotImplementedError");
                        }catch(e){
                           this.assertTrue(e.name.match("Claypool.MethodNotImplementedError"), "Found expected error.");
                        }
                    },
                    "@author"       :   "Chris Thatcher",
                    "@email"        :   "thatcher.christopher@gmail.com"
                }
            ]
        },
        /**
        *   Claypool.ContextContributor
        *   
        *   @author Chris Thatcher 
        *   @email thatcher.christopher@gmail.com
        */
        {
            "@class"    : "Claypool.ContextContributor$Abstract",
            "methodTests"       : [
                //ContextContibutorCreationTest
                {
                    "@method"       :   "Claypool.ContextContributor$Abstract.constructor",
                    "@description"  :   "Please add a one sentence description.",
                    "@summary"      :   "Please add a short paragraph describing the practical " +
                                        "puposes of this test.  It should also include variations "+
                                        "of the test already included.",
                    "@commonErrors" :   "It would be unusual for this test to fail if the source " +
                                        "is actually included correctly.  Please use firefox+firebug "+
                                        "to ensure that the source was downloaded properly.",
                    "test"          :   function(){
                        this.expect(1);
                        var contextContibutor = new $.ContextContributor();
                        this.assertTrue(contextContibutor, "The ContextContributor can be successfully created.");
                    },
                    "@author"       :   "Chris Thatcher",
                    "@email"        :   "thatcher.christopher@gmail.com"
                },
                //RegisterContextContibutorTest
                {
                    "@method"       :   "Claypool.ContextContributor$Abstract.registerContext",
                    "@description"  :   "Can't use interface unless the implementation is provided.",
                    "@summary"      :   "Claypool exposes several interface contracts that allow "+
                                        "you to develop useful implementations.  Interfaces are "+
                                        "not checked and will result in runtime errors being thrown.",
                    "@commonErrors" :   "If you get a Claypool.MethodNotImplementedError, it's a "+
                                        "good idea to start looking for a class that has forgotton "+
                                        "to implement a interface function.",
                    "test"          :   function(){
                        this.expect(1);
                        var contextContibutor = new $.ContextContributor();
                        try{
                            contextContibutor.registerContext("Any Value");
                            this.fail("Expected Claypool.MethodNotImplementedError");
                        }catch(e){
                            this.assertTrue(e.name.match("Claypool.MethodNotImplementedError"), "Found expected error.");
                        }
                    },
                    "@author"       :   "Chris Thatcher",
                    "@email"        :   "thatcher.christopher@gmail.com"
                }
            ]
        },
        /**
        *   Claypool.BaseFactory
        *   
        *   @author Chris Thatcher 
        *   @email thatcher.christopher@gmail.com
        */
        {
            "@class"    : "Claypool.BaseFactory$Abstract",
            "methodTests"       : [
                //BaseFactoryCreationTest
                {
                    "@method"       :   "Claypool.BaseFactory$Abstract.constructor",
                    "@description"  :   "A BaseFactory can be successfully created.",
                    "@summary"      :   "The BaseFactory provides the basic funtionality for integration "+
                                        "with any JSON-ick configuration registered with the Claypool.Configuration "+
                                        "namespace. ",
                    "@commonErrors" :   "It would be unusual for this test to fail if the source " +
                                        "is actually included correctly.  Please use firefox+firebug "+
                                        "to ensure that the source was downloaded properly.",
                    "test"          :   function(){
                        this.expect(1);
                        var baseFactory = new $.BaseFactory();
                        this.assertNotNull(baseFactory, "A BaseFactory can be successfully created.");
                    },
                    "@author"       :   "Chris Thatcher",
                    "@email"        :   "thatcher.christopher@gmail.com"
                },
                //LoadConfigurationTest
                {
                    "@method"       :   "Claypool.BaseFactory$Abstract.loadConfig",
                    "@description"  :   "Claypool can load dynamically via AJAX when Claypool.Configuration "+
                                        "is unavailable.",
                    "@summary"      :   "When the namespace Claypool.Configuration can't be found "+
                                        "Claypool.BaseFactory defines the default behavior whereby "+
                                        "the configuration is attempted to be loaded via AJAX at the "+
                                        "BaseFactory.configurationUrl and adds the property to the "+
                                        "Claypool.Configuration specified by the implementor specific "+
                                        "property of 'this.configurationId'",
                    "@commonErrors" :   "The most common error is not providing a url in the implementor or "+
                                        "assuming it will set the entire Claypool.Configuration and not just a "+
                                        "property of Claypool.Configuration.",
                    "test"          :   function(){
                        this.expect(4);
                        var baseFactory = new $.BaseFactory({
                            configurationUrl:   "data/baseFactoryTest.js",
                            configurationId :   "baseFactoryLoadTest"
                        });
                        var _this = this;
                        baseFactory.loadConfig({
                        	//url://could also pass url explicitly
                        	callback: function(){
		                        _this.assertNotNull($.Configuration.baseFactoryLoadTest, "The Configuration Section was defined.");
		                        _this.assertEqual($.Configuration.baseFactoryLoadTest.a, 1, "The Configuration was set.");
		                        _this.assertEqual($.Configuration.baseFactoryLoadTest.b, 2, "The Configuration was set.");
		                        _this.assertEqual($.Configuration.baseFactoryLoadTest.c, 3, "The Configuration was set.");
	                        }
	                    });
                    },
                    "@author"       :   "Chris Thatcher",
                    "@email"        :   "thatcher.christopher@gmail.com"
                },
                //GetConfigurationTest
                {
                    "@method"       :   "Claypool.BaseFactory$Abstract.getConfiguration",
                    "@description"  :   "Retreives the current configuration or tries to load it then return it.",
                    "@summary"      :   "This test is really a combination of setConfiguration, loadConfiguration and "+
                                        "getConfiguration.  For now we are only concerned that if the configuration is "+
                                        "already set, it is simple returned.",
                    "@commonErrors" :   "Please add a short paragraph describing simple user errors "+
                                        "that might occur to create issues this test doesn't address.",
                    "test"          :   function(){
                        this.expect(4);
                        var baseFactory = new $.BaseFactory();
                        baseFactory.setConfig("baseFactoryTest", {a:1,b:2,c:3});
                        this.assertNotNull(baseFactory.getConfig(), "The Configuration Section was defined.");
                        this.assertEqual(baseFactory.getConfig().a, 1, "The Configuration was set.");
                        this.assertEqual(baseFactory.getConfig().b, 2, "The Configuration was set.");
                        this.assertEqual(baseFactory.getConfig().c, 3, "The Configuration was set.");
                    },
                    "@author"       :   "Chris Thatcher",
                    "@email"        :   "thatcher.christopher@gmail.com"
                },
                //SetConfigurationTest
                {
                    "@method"       :   "Claypool.BaseFactory$Abstract.setConfiguration",
                    "@description"  :   "Explicity sets a part of the Claypool.Configuration.",
                    "@summary"      :   "Claypool.Configuration is simply an object and can it's properties "+
                                        "are by convention just subsets of the configuration.  The functional "+
                                        "test simply needs to verify that the property exists on "+
                                        "Claypool.Configuration after setConfiguration is called.",
                    "@commonErrors" :   "It would be unusual for this test to fail if the source " +
                                        "is actually included correctly.  Please use firefox+firebug "+
                                        "to ensure that the source was downloaded properly.",
                    "test"          :   function(){
                        this.expect(4);
                        var baseFactory = new $.BaseFactory();
                        baseFactory.setConfig("baseFactoryTest", {a:1,b:2,c:3});
                        this.assertNotNull(Claypool.Configuration.baseFactoryTest, "The Configuration Section was defined.");
                        this.assertEqual(Claypool.Configuration.baseFactoryTest.a, 1, "The Configuration was set.");
                        this.assertEqual(Claypool.Configuration.baseFactoryTest.b, 2, "The Configuration was set.");
                        this.assertEqual(Claypool.Configuration.baseFactoryTest.c, 3, "The Configuration was set.");
                    },
                    "@author"       :   "Chris Thatcher",
                    "@email"        :   "thatcher.christopher@gmail.com"
                },
                //AbstractUpdateConfiguratationTest
                {
                    "@method"       :   "Claypool.BaseFactory$Abstract.updateConfigurationCache",
                    "@description"  :   "Can't use interface unless the implementation is provided.",
                    "@summary"      :   "Claypool exposes several interface contracts that allow "+
                                        "you to develop useful implementations.  Interfaces are "+
                                        "not checked and will result in runtime errors being thrown.",
                    "@commonErrors" :   "If you get a Claypool.MethodNotImplementedError, it's a "+
                                        "good idea to start looking for a class that has forgotton "+
                                        "to implement a interface function.",
                    "test"          :   function(){
                        this.expect(1);
                        var baseFactory = new $.BaseFactory();
                        try{
                           baseFactory.updateConfig();
                           this.fail("Expected Claypool.MethodNotImplementedError");
                        }catch(e){
                           this.assertTrue(e.name.match("Claypool.MethodNotImplementedError"), "Found expected error.");
                        }
                    },
                    "@author"       :   "Chris Thatcher",
                    "@email"        :   "thatcher.christopher@gmail.com"
                },
                //AbstractCreateTest
                {
                    "@method"       :   "Claypool.BaseFactory$Abstract.create",
                    "@description"  :   "Can't use interface unless the implementation is provided.",
                    "@summary"      :   "Claypool exposes several interface contracts that allow "+
                                        "you to develop useful implementations.  Interfaces are "+
                                        "not checked and will result in runtime errors being thrown.",
                    "@commonErrors" :   "If you get a Claypool.MethodNotImplementedError, it's a "+
                                        "good idea to start looking for a class that has forgotton "+
                                        "to implement a interface function.",
                    "test"          :   function(){
                        this.expect(1);
                        var baseFactory = new $.BaseFactory();
                        try{
                           baseFactory.create();
                           this.fail("Expected Claypool.MethodNotImplementedError");
                        }catch(e){
                           this.assertTrue(e.name.match("Claypool.MethodNotImplementedError"), "Found expected error.");
                        }
                    },
                    "@author"       :   "Chris Thatcher",
                    "@email"        :   "thatcher.christopher@gmail.com"
                }
            ]
        },
        /**
        *   Claypool.Error
        *   
        *   @author Chris Thatcher 
        *   @email thatcher.christopher@gmail.com
        */
        {
            "@class"    : "Claypool.Error$Class",
            "methodTests"       : [
                //CatchClaypoolErrorTest
                {
                    "@method"       :   "Claypool.Error$Class.constructor",
                    "@description"  :   "The Error can be created, thrown and hierarchicaly identified.",
                    "@summary"      :   "Claypool tries to help regulate erros by providing a simple way "+
                                        "to extend and identify errors regardless of there position in "+
                                        "the hierarchy (like python or java etc).",
                    "@commonErrors" :   "It would be unusual for this test to fail if the source " +
                                        "is actually included correctly.  Please use firefox+firebug "+
                                        "to ensure that the source was downloaded properly.",
                    "test"          :   function(){
                        this.expect(1);
                        try{
                           throw new $.Error();
                           this.fail("Expected Claypool.Error");
                        }catch(e){
                           this.assertTrue(e.name.match("Claypool.Error"), "Can match error as Claypool.Error");
                        }
                    },
                    "@author"       :   "Chris Thatcher",
                    "@email"        :   "thatcher.christopher@gmail.com"
                }
            ]
        },
        /**
        *   Claypool.MethodNotImplementedError
        *   
        *   @author Chris Thatcher 
        *   @email thatcher.christopher@gmail.com
        */
        {
            "@class"    : "Claypool.MethodNotImplementedError$Class",
            "methodTests"       : [
                //constructor
                {
                    "@method"        :   "Claypool.MethodNotImplementedError$Class.constructor",
                    "@description"   :   "The Error can be created, thrown and hierarchicaly identified.",
                    "@summary"       :   "Claypool tries to help regulate erros by providing a simple way "+
                                         "to extend and identify errors regardless of there position in "+
                                         "the hierarchy (like python or java etc).",
                    "@commonErrors"  :   "It would be unusual for this test to fail if the source " +
                                         "is actually included correctly.  Please use firefox+firebug "+
                                         "to ensure that the source was downloaded properly.",
                    "test"           :   function(){
                        this.expect(2);
                        try{
                           throw new $.MethodNotImplementedError();
                           this.fail("Expected Claypool.MethodNotImplementedError");
                        }catch(e){
                           this.assertTrue(e.name.match("Claypool.Error"),               "Can match error as Claypool.Error");
                           this.assertTrue(e.name.match("Claypool.MethodNotImplementedError"),  "Can match error as Claypool.MethodNotImplementedError");
                        }
                    },
                    "@author"       :   "Chris Thatcher",
                    "@email"        :   "thatcher.christopher@gmail.com"
                }
            ]
        },
        /**
        *   Claypool.ConfigurationError
        *   
        *   @author Chris Thatcher 
        *   @email thatcher.christopher@gmail.com
        */
        {
            "@class"    : "Claypool.ConfigurationError$Class",
            "methodTests"       : [
                //constructor
                {
                    "@method"        :   "Claypool.ConfigurationError$Class.constructor",
                    "@description"   :   "The Error can be created, thrown and hierarchicaly identified.",
                    "@summary"       :   "Claypool tries to help regulate erros by providing a simple way "+
                                         "to extend and identify errors regardless of there position in "+
                                         "the hierarchy (like python or java etc).",
                    "@commonErrors"  :   "It would be unusual for this test to fail if the source " +
                                         "is actually included correctly.  Please use firefox+firebug "+
                                         "to ensure that the source was downloaded properly.",
                    "test"           :   function(){
                        this.expect(2);
                        try{
                           throw new $.ConfigurationError();
                           this.fail("Expected Claypool.ConfigurationError");
                        }catch(e){
                           this.assertTrue(e.name.match("Claypool.Error"),               "Can match error as Claypool.Error");
                           this.assertTrue(e.name.match("Claypool.ConfigurationError"),  "Can match error as Claypool.ConfigurationError");
                        }
                    },
                    "@author"       :   "Chris Thatcher",
                    "@email"        :   "thatcher.christopher@gmail.com"
                }
            ]
        },
        /**
        *   Claypool.NameResolutionError
        *   
        *   @author Chris Thatcher 
        *   @email thatcher.christopher@gmail.com
        */
        {
            "@class"    : "Claypool.NameResolutionError$Class",
            "methodTests"       : [
                //constructor
                {
                    "@method"       :   "Claypool.NameResolutionError$Class.constructor",
                    "@description"  :   "The Error can be created, thrown and hierarchicaly identified.",
                    "@summary"      :   "Claypool tries to help regulate erros by providing a simple way "+
                                        "to extend and identify errors regardless of there position in "+
                                        "the hierarchy (like python or java etc).",
                    "@commonErrors" :   "It would be unusual for this test to fail if the source " +
                                        "is actually included correctly.  Please use firefox+firebug "+
                                        "to ensure that the source was downloaded properly.",
                    "test"          :   function(){
                        this.expect(2);
                        try{
                           throw new $.NameResolutionError();
                           this.fail("Expected Claypool.NameResolutionError");
                        }catch(e){
                           this.assertTrue(e.name.match("Claypool.Error"), "Can match error as Claypool.Error");
                           this.assertTrue(e.name.match("Claypool.NameResolutionError"), "Can match error as Claypool.NameResolutionError");
                        }
                    },
                    "@author"       :   "Chris Thatcher",
                    "@email"        :   "thatcher.christopher@gmail.com"
                }
            ]
        }
    ]
};
})(jQuery);