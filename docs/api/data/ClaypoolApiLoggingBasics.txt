[[PageOutline]]
= Claypool Api Logging =

As applications become more complex and longer lived at a single url even stepping through a debugger can be difficult and time consuming (not to mention the lack of a useful debugger on IE). Tracking down issues can be the critical bridge between an application that can grow and one that reaches critical mass. 

Category Logging has been around for many languages for many years now, but javascript still apparently was lacking a good implementation. Using logging correctly can reduce you development cost and headaches and needn't burden the performance of production code.

----
== Examples ==

'''Press F12 or Ctrl+Shift+L to see the messages logged by this application.'''

---- 
=== Creating a Logger ===

Logging relies on the notion of Categories. Categories are '.' delimited strings which allow you to turn on and off all, some, or single logger(s) so you can easily peer under the hood of any aspect of your application.

{{{
var logger = $.Logging.getLogger('MyApp.DataAccess.FeedReader'); 
}}}

----
=== Configuring Loggers for your Application. ===

The Categories are hierarchical so in the example below a logger with the category '!DocsApp.Foo' would be logged at the level INFO (since the category '!DocsApp' is the next closest). The special Category 'root' is used for all loggers that don't fit into any configured Category.
{{{
$.Configuration = {  
        logging : [ 
           { 
               category:'DocsApp', 
               level:'INFO', 
               appender:'Claypool.Logging.ConsoleAppender' 
           },{ 
               category:'DocsApp.Models', 
               level:'DEBUG', 
               appender:'Claypool.Logging.ConsoleAppender' 
           },{ 
               category:'DocsApp.Views', 
               level:'DEBUG', 
               appender:'Claypool.Logging.ConsoleAppender' 
           },{ 
               category:'DocsApp.Controllers', 
               level:'DEBUG', 
               appender:'Claypool.Logging.ConsoleAppender' 
           },{ 
               category:'Claypool', 
               level:'WARN', 
               appender:'Claypool.Logging.ConsoleAppender' 
           },{ 
               category:'root', 
               level:'ERROR', 
               appender:'Claypool.Logging.ConsoleAppender' 
           } 
       ] 
}; 
}}}

----
=== Getting started using a Logger. ===
Loggers allow you to use sprintf style calls which minimizes performance impact when loggers are turned down or off, because the messages are not formatted unless they are actually logged. 

The general rules of logging are 
 * (1) 86% of messages are DEBUG. 
 * (2) 12% of messages are INFO. 
 * (3) The remaining 2% are WARN, ERROR, and EXCEPTION. 
 * (4) Log meaningful, human readable sentences, not reverse polish... 
 * (5)Dont log position, eg 'Entering method', 'Leaving Method', We'll see how we can accomplish that with an Aspect using only a few lines of code. 

''(P.S. Claypool will also log in Rhino!)''
{{{
$.extend(this, $.Logging.getLogger('A.B.C'));
//all logging calls are chainable
this.debug('This is my first log message!').
     debug('This is my %s log message!', 'second'). 
     info('This is my %s log message! And it has %d sentences.', 'third', 2).
     warn('This is a pretty serious message.  Better be careful...');
try{ 
   throw new Error('Oops'); 
}catch(e){ 
   this.error('You made a mistake.').
        exception(e);//formats a stack trace to the logs 
}
}}}

----
=== Additive vs. Identity Logging Categories ===

The Category used by a logger depends on how the logger is instantiated. Internally Claypool uses the Identity pattern because it provides a finer grain control over the logging configuration.

----
==== Identity Logging Categories ====
{{{
 var AB = function(){
    this.logger = $.Logging.getLogger('A.B');
 };
 AB.prototype.foo = function(){
    this.logger.debug('Is it luck?');
 };

 var ABC = function(){
    $.extend(this, new AB())
    this.logger = $.Logger.getLogger('A.B.C');
 };
 ABC.prototype.bar = function(){
    this.foo();
    this.logger.debug('Dog will hunt!');
 };

 var abc = new ABC();
 abc.bar();
}}}

Will log as:
{{{
A.B DEBUG: [Wed, 03 Sep 2008 17:55:57 GMT] Is it luck?
A.B.C DEBUG: [Wed, 03 Sep 2008 17:55:57 GMT] Dog will hunt!
}}}

----
==== Additive Logging Categories ====
{{{
 var AB = function(){
    $.extend(this, $.Logging.getLogger('A.B'));
 };
 AB.prototype.foo = function(){
    this.debug('Is it luck??');
 };

 var ABC = function(){
    $.extend(this, new AB())
    $.extend(this, $.Logger.getLogger('A.B.C'));
 };
 ABC.prototype.bar = function(){
    this.foo();
    this.debug('Dog will hunt!');
 };

 var abc = new ABC();
 abc.bar();
}}}

Will log as:
{{{
A.B.C DEBUG: [Wed, 03 Sep 2008 17:55:57 GMT] Is it luck?
A.B.C DEBUG: [Wed, 03 Sep 2008 17:55:57 GMT] Dog will hunt!
}}}
----