[[PageOutline]]
= Claypool Api Core =

----
== Static Methods ==

----
=== $ ===
''>> Easy access to objects stored in context.''

The $.$ function is our 'Write Less, Do More' function. In general it's like retrieving a DOM node by id with jQuery, however what is searched is a 'collection of contexts'.

The Global Context is simply an array of other Contexts that are searched in order.  For example the Application Context, covered more in ClaypoolApiApplication, stores all the configuration and application managed objects, and thanks to the IoC (Inversion of Control) container, the following line will return the object, constructing it from it's configuration if it has never been created before, or simply returning it if it has. 

{{{
  var myThing = $.$('myThing');
}}}

----
=== register ===
''>> Primary registration point for contexts.''

During the initial parsing of the javascript, contexts that want to register with the global context use this method.

If you are not developing code for Claypool itself you dont need to worry about this function.  This example is taken directly from Claypool.Application.
{{{
   //registers the Application Context.
   $.register($App, 0);
}}}

----
=== createGUID ===
''>> Convenient generator for a unique id in local memory space.''

It's not unusual for an application component to need to generate an id thats unique across other ids generated by the same function in memory. This static method simply uses a sequence starting at the negative value of -2147483641 and increases by one with each call.

{{{
var guid = $.createGUID(); 
var nextGuid = $.createGUID();
//now nextGuid is guid + 1
}}}

----
=== resolveName ===
''>> Resolves namespaced objects from a string''

Many parts of Claypool will specify a reference to an class method, or attribute as a fully qualified (namespaced) string. This simple function allows those referenced paths to be resolved to the script object if it actually exists.

{{{
 A = { B:{ C: 'valueOrObject'}}; 
 var thing = $.resolveName('A.B.C');
 //thing is now 'valueOrObject'
}}}

----
=== extend ===
''>> Via claypool.providers.js, extend is by default an alias for jQuery.extend.''

----
=== isFunction ===
''>> Via claypool.providers.js, extend is by default an alias for jQuery.isFunction.''
----
