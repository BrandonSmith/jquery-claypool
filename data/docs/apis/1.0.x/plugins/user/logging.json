{'_':{
/**************************************************/
    'id':'apis/1.0.x/plugins/user/logging',
    'version':'1.0.x',
    'location':'app/configs/logging.js',
    'label':'logging', 
    'plugin':'$.logging',
    'sections':[{
/**************************************************/
        'label':'usage',
        'description': <>
        <p>
            Configuring logging is very simple.  All you need to understand
            is the notion of 'category' and 'level'.  
        </p>
        <p>
            A category is just a
            dot-delimited name, like 'Myapp.Controllers.Login'.  This is a highly
            specific category, and if you logging configuration is specified,
            it will follow the configuration for 'Myapp.Controllers', then 'Myapp',
            and finally 'root'.
        </p>
        <p>
            A level is a ceiling, and all messages under that ceiling are logged.
            DEBUG is the highest ceiling, then INFO, WARN, ERROR, and NONE
            follow in descending order.  Setting a level to DEBUG mean you get all
            messages, DEBUG, INFO, WARN, ERROR, and EXCEPTION, while setting it to WARN
             means you only see WARN, ERROR, and EXCEPTION.
        </p>
    </>
 },{
/**************************************************/
        'label':'options',
        'description':<>
        <p>
           Loggers can be enabled or disabled, turned up or turned downed here. 
           There are five levels for loggers, DEBUG, INFO, WARN, ERROR, and NONE. 
           Each level will include log messages from higher levels but not lower. 
           So DEBUG will print all messages while WARN will include error 
           messages but not info and debug messages.
        </p>
        <p>
            By default, all Categories that are not explicitly configured will 
            use the 'root' 
        </p>
        <table cellspacing="0" class="options">
            <thead><tr><th>Name</th><th>Type</th></tr></thead>
            <tbody>
                <tr class="option">
                    <th>category</th>
                    <td class="type"><a href="#String">String</a></td>
                    <td class="default"/>
                </tr>
                <tr><td class="desc" colspan="3">
                    A dot delimited namespace string
                </td></tr>
                <tr class="option">
                    <th>level</th>
                    <td class="type"><a href="#String">String</a></td>
                    <td class="default"/>
                </tr>
                <tr><td class="desc" colspan="3">
                    one of 'DEBUG', 'INFO', 'WARN', 'ERROR', or 'NONE'
                </td></tr>
            </tbody>
        </table>
    </>
 },{
    /**************************************************/
        'label':'examples',
        'description':<>
        <p>
            Here is a simple example logging configuration.  
        </p>
        <pre class='box'>
/*
 * @file app/configs/logging.js
 * @description If you need to peer into whats going on 
 *     under the hood in you application, but also want
 *     to focus on an isolated area of code and not the
 *     entire application you can turn up/down/on/off
 *     logging categories
 */
(function($)&amp;#x7B;
    
    $.logging([ 

        &amp;#x7B;category:"MyApp",                          level:"WARN"&#x7D;,
        &amp;#x7B;category:"MyApp.Views",                    level:"INFO"&#x7D;,
        &amp;#x7B;category:"MyApp.Controllers",              level:"INFO"&#x7D;,
        &amp;#x7B;category:"MyApp.Controllers.Hello",        level:"DEBUG"&#x7D;,
        &amp;#x7B;category:"Claypool",                       level:"WARN"&#x7D;,
        &amp;#x7B;category:"Claypool.MVC",                   level:"INFO"&#x7D;,
        &amp;#x7B;category:"root",                           level:"ERROR"&#x7D;

    ]);
    
&#x7D;)(jQuery);

        </pre>
    </> 
}]


}}